#!/bin/sh
# postinst script for postgresql
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
  configure)
    APPDIR=/apps/postgresql-readynas

    if [ ! -d $APPDIR/db ]; then
        chown -R admin:postgres $APPDIR
        chmod g+rwX $APPDIR
        # disable main instance by default
        update-rc.d postgresql disable
        service postgresql stop

        su postgres -s /bin/sh -c "/usr/lib/postgresql/9.1/bin/initdb $APPDIR/db"
        cp -a $APPDIR/default-config/* $APPDIR/db
        sed -i "s/^#listen_addresses = 'localhost'/listen_addresses = '*'/" $APPDIR/db/postgresql.conf
        su postgres -s /bin/sh -c "/usr/lib/postgresql/9.1/bin/postgres --single -D $APPDIR/db -d postgres" <<EOF
CREATE USER root WITH SUPERUSER;
CREATE USER admin WITH SUPERUSER;
EOF

        # HACK: allow postgres to read shadow
        # needed for pam based auth
        usermod -aG shadow postgres
        chgrp shadow /etc/shadow
        chmod g+r /etc/shadow

    fi
    event_push app readynasd '<add-s resource-type="LocalApp" resource-id="LocalApp"><LocalApp appname="postgresql-readynas" success="1" reboot="1"/></add-s>' 0 0
    ;;

  abort-upgrade|abort-remove|abort-deconfigure)
    ;;

  *)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
